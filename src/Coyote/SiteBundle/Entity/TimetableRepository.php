<?php

namespace Coyote\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * TimetableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimetableRepository extends EntityRepository
{
    /******************************Commun*****************************/
    
                /* getScheduleUserAction / postScheduleUser */
    /**
     * Function to create datetime about week and year
     * @access public
     * @param string $year
     * @param string $week
     * @return DateTime
     */
    public function createDateYearWeek($year, $week)
    {
        if(strlen($week) == 1)
            $week = "0".$week;
        $date = date( "Y-m-d", strtotime($year."W".$week."1") );
        return $date;
    }
    
    /**
     * Function to search Timetable about a date.
     * @access public
     * @param DateTime $date
     * @return 7 days of Timetable if found date
     */
    public function findIdDate($date)
    {
        $date = new \DateTime($date);
        $result = $date->format('N');
        if ($result > 1)
        {
            $result--;
            $date->modify("-".$result." day");
        }
    
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
        ->from('CoyoteSiteBundle:Timetable', 't')
        ->where('t.date >= :date')
        ->setParameters(array('date' => $date->format('Y-m-d')));
        $data_timetable = $qb->getQuery()
        ->setMaxResults(7)
        ->getResult();
        return $data_timetable;
    }
    
    /*************************postScheduleUser*************************/
    
    /**
     * Function to create datetime about string format dd/mm/yyyy
     * @param string $datestring
     * @return \DateTime
     */
    public function createDateString($datestring)
    {
        $dateexplode = explode('/', $datestring);
        $datecompose = date($dateexplode[2]).'-'.date($dateexplode[1]).'-'.date($dateexplode[0]);
        $date = (new \DateTime($datecompose));
        return $date;
    }
    
    /*****************************************************************/
    /***********************Anciennes Fonctions***********************/
    /*****************************************************************/
    
    /**
     * find shedule id
     *
     * @access public
     * @param mixed $no_week
     * @param mixed $year
     * @param mixed $user_id
     * @return array schedule id
     */
    public function findScheduleId($no_week, $year, $user_id)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.id')
           ->from('CoyoteSiteBundle:Schedule', 's')
           ->innerJoin('CoyoteSiteBundle:Timetable', 't', 'WITH', 't.id = s.timetable')
           ->where('s.user = :user and t.year = :year and t.no_week = :no_week')
           ->setParameters(array('user' => $user_id, 'year' => $year, 'no_week' => $no_week));
        $id_schedule =  $qb->getQuery()
                           ->getResult();

        return $id_schedule;
    }

    /**
     * find timetable id.
     *
     * @access public
     * @param mixed $no_week
     * @param mixed $year
     * @return array timetable id
     */
    public function findTimetableId($no_week, $period)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.id')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.week = :week and t.period = :period')
           ->setParameters(array('week' => $no_week, 'period' => $period));
        $timetable_id =  $qb->getQuery()
                            ->getResult();

        return $timetable_id;
    }

    /**
     * find period respect to date function.
     *
     * @access public
     * @param mixed $date
     * @return timetable pay_period
     */
    public function findPeriodByDate($date)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.period')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date = :date')
           ->setParameters(array('date' => $date));
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findWorkingDay($user)
    {
        $date = new \DateTime();
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('CoyoteSiteBundle:Timetable', 't')
            ->where('t.date = :date')
            ->setParameters(array('date' => $date->format('Y-m-d')));
        $data_date = $qb->getQuery()->getOneOrNullResult();

        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('CoyoteSiteBundle:Timetable', 't')
            ->where('t.period = :period')
            ->orderBy('t.id', 'ASC')
            ->setParameters(array('period' => $data_date->getPeriod()));
        $data_date = $qb->getQuery()->getResult();

        $datefin = date("Y-m-d H:i:s", mktime(23,59,59,date("m"),0,date("Y")));
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date > :date and t.date < :datefin and t.holiday = :holiday ')
           ->setParameters(array('date' => $data_date[0]->getDate()->format('Y-m-d'), 'datefin' => 
           		$datefin, 'holiday' => '0'));
        $timetable =  $qb->getQuery()
                         ->getResult();

        $count = 0;
        foreach($timetable as $data)
        {
            if($data->getDate()->format('l') != "Sunday" && $data->getDate()->format('l') != "Saturday")
                $count++;
        }
        return $count;
    }    
}
