<?php

namespace Coyote\SiteBundle\Entity;

use Coyote\SiteBundle\Entity\Site;
use Coyote\SiteBundle\Entity\Currency;
use Coyote\SiteBundle\Entity\Business;
use Coyote\SiteBundle\Entity\Fee;
use Coyote\SiteBundle\Entity\UserFees;

use Doctrine\ORM\EntityRepository;

/**
 * ExpenseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpenseRepository extends EntityRepository
{
    public function findExpense($date, $id)
    {
        $query = $this->getEntityManager()
                        ->createQuery("
	            SELECT e FROM CoyoteSiteBundle:Expense e
	            WHERE e.date LIKE :key and e.userfees = :id"
                        );
        $query->setParameters(array('key' => '%'.$date.'%', 'id' => $id));
        return $query->getResult();
    }

    public function updateStatus($em)
    {
        $expense = $em->getRepository('CoyoteSiteBundle:Expense')->findAll();
        foreach($expense as $data)
        {
            $data->setStatus(0);
            $em->persist($data);
        }
        $em->flush();
        return "OK";
    }

    public function findforCompta()
    {
        $query = $this->getEntityManager()
                      ->createQuery("
                        SELECT e FROM CoyoteSiteBundle:Expense e
                        WHERE e.status = 1 ORDER BY e.userfees "
                        );
        $res = $query->getResult();

        $result = '';
        $userfees = '';
        foreach($res as $data)
        {
            if($data->getUserFees()->getLogin() != $userfees)
            {
                $userfees = $data->getUserFees()->getLogin();
                $result .= "\"H\";\"".$data->getUserFees()->getLogin()."\"\r\n";
            }
            $result .= "\"D\";";
            $result .= "\"".$data->getUserFees()->getLogin()."\";";//En majuscule
            $result .= "\"".$data->getSite()->getCode()."\";";
            $date = $data->getDate();
            $date = explode('/', $date);
            $result .= $date[0].$date[1].$date[2].";";// Enlever les /
            $result .= "\"".$data->getFee()->getCode()."\";";
            $result .= "\"".$data->getCurrency()->getCode()."\";";
            $result .= $data->getAmount().";";
            $result .= $data->getActualAmount().";";
            $result .= $data->getAmountTTC().";";
            $feeid = $data->getFee()->getCodeRate();
            $result .= "\"".$feeid."\";";
            $result .= $data->getAmountTVA().";";
            $result .= $data->getAmountTVA().";";
            $result .= "\"".$data->getUserFees()->getCode()."\";";
            $result .= "\"\";";
            $result .= "\"".$data->getBusiness()->getCode()."\";";
            $result .= "\"".$data->getUserFees()->getService()."\";";
            $result .= "\"".$data->getComment()."\";"."\r"."\n";

        }

        return $result;
    }

    public function calculTVA($rate, $price)
    {
        $vat_amount = $price - (($price * 100) / ($rate +100));
        return round($vat_amount, 2);
    }

    public function formDate($date)
    {
        if(is_numeric($date))
        {
            $jour = substr($date, 0, 2);
            $mois = substr($date, 2, 2);
            $annee = substr($date, 4, 3);
            $date = $jour."/".$mois."/".$annee;
        }
        return $date;
    }

    public function saveExpense($user_fee_id, $data, $increment)
    {
        $site = $this->_em->getRepository('CoyoteSiteBundle:Site')->find($data['site'.$increment]);
        $currency = $this->_em->getRepository('CoyoteSiteBundle:Currency')->find($data['devise'.$increment]);
        $business = $this->_em->getRepository('CoyoteSiteBundle:Business')->find($data['affaire'.$increment]);
        $fee = $this->_em->getRepository('CoyoteSiteBundle:Fee')->find($data['article'.$increment]);
        $user_fee = $this->_em->getRepository('CoyoteSiteBundle:UserFees')->find($user_fee_id);

        $expense = new expense();
        $expense->setUserFees($user_fee);
        $expense->setFee($fee);
        $expense->setBusiness($business);
        $expense->setCurrency($currency);
        $expense->setSite($site);
        $expense->setComment($data['com'.$increment]);
        $rate = $fee->getRate();
        $price = $data['ttc'.$increment];
        $tva = $this->calculTVA($rate, $price);
        $expense->setAmountTVA($tva);
        $expense->setAmountTTC($price);
        $expense->setActualAmount($price);
        $expense->setAmount($data['qte'.$increment]);
        $expense->setStatus(1);
        $date = $this->formDate($data['date'.$increment]);
        $expense->setDate($date);
        return $expense;
    }
}
