<?php

namespace Coyote\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DirectoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectoryRepository extends EntityRepository
{
    public function findAllByFirstname($country, $business)
    {
	    $qb = $this->_em->createQueryBuilder();
        $qb->select('d')
           ->from('CoyoteSiteBundle:Directory', 'd')
           ->where("d.country = :country and d.enabled = 1 and d.business like :business ")
           ->orderBy('d.firstname', 'ASC')
           ->setParameters(array('country' => $country, 'business' => $business));
        $directories = $qb->getQuery()->getResult();
        return $directories;
	}

    public function findAllByFunctionService($country, $business)
    {
	    $qb = $this->_em->createQueryBuilder();
        $qb->select('d')
           ->from('CoyoteSiteBundle:Directory', 'd')
           ->where('d.country = :country and d.enabled = 1 and d.business like :business')
           ->orderBy('d.function_service', 'ASC')
           ->setParameters(array('country' => $country, 'business' => $business));
        $directories = $qb->getQuery()->getResult();
        return $directories;
    }

    public function findAll()
    {
        return $this->findBy(array('enabled' => 1), array('firstname' => 'ASC'));
    }

    public function updateEnable($directory)
    {
	    $directory->setEnabled(0);
	    return $directory;
    }

    public function updateDate($country)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('d')
           ->from('CoyoteSiteBundle:Directory', 'd')
           ->where('d.country = :country')
           ->orderBy('d.created_at', 'DESC')
           ->setParameters(array('country' => $country));
        $result_createdat = $qb->getQuery()->getResult();

        $qb = $this->_em->createQueryBuilder();
        $qb->select('d')
           ->from('CoyoteSiteBundle:Directory', 'd')
           ->where('d.country = :country')
           ->orderBy('d.updated_at', 'DESC')
           ->setParameters(array('country' => $country));
        $result_updatedat = $qb->getQuery()->getResult();

        $date_createdat = $result_createdat[0]->getCreatedAt();
        $date_updatedat = $result_updatedat[0]->getUpdatedAt();

        if($date_createdat > $date_updatedat)
            return $date_createdat->format('Y-m-d H:i');
        else
            return $date_updatedat->format('Y-m-d H:i');
    }
}
