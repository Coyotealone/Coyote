<?php

namespace Coyote\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScheduleRepository extends EntityRepository
{
    public function findNoWeek($date, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date LIKE :date')
           ->setParameters(array('date' => '%'.$date.'%'));
        
        $timetable = $qb->getQuery()
                        ->getResult();
        
        $i = 0;
        $timetable_noweek = '';
        foreach($timetable as $data)
        {
            $data_noweek = $data->getNoweek();
            if($i == 0)
            {
                $timetable_noweek[$i] = $data_noweek;
                $i++;
            }
            
            if($timetable_noweek[$i-1] != $data_noweek)
            {
                $timetable_noweek[$i] = $data_noweek;
                $i++;
            } 
        }             
        return $timetable_noweek;
    }
    
    public function findTimeWeek($user, $week, $year)
    {    
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.id')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.no_week = :week and t.year = :year')
           ->setParameters(array('week' => $week, 'year' => $year));
        
        $timetable_id =  $qb->getQuery()
                            ->getResult();
        $nbjour = count($timetable_id);
        
        $timetable_idstart = $timetable_id[0]['id'];
        $timetable_idend = $timetable_id[$nbjour-1]['id'];
    
        $query = $this->getEntityManager()
                      ->createQuery("
                        SELECT s FROM CoyoteSiteBundle:Schedule s
                        WHERE s.user = :user and s.timetable BETWEEN :time1 and :time2 "
                        );
        $query->setParameters(array(
            'time1' => $timetable_idstart, 
            'time2' => $timetable_idend, 
            'user' => $user
            ));
        $res = $query->getResult();
        $timeres = 0;
        foreach($res as $data)
        {
            $time = $data->getWorkingtime();
            $timeres += $this->calculTime($time);
        } 
        return $this->formatTime($timeres);
    }

    public function findTime($date, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.id')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date LIKE :date')
           ->setParameters(array('date' => '%'.$date.'%'));
        
        $timetable_id =  $qb->getQuery()
                            ->getResult();
        $nbjour = count($timetable_id);
                
        $query = $this->getEntityManager()
                      ->createQuery("
                        SELECT s FROM CoyoteSiteBundle:Schedule s
                        WHERE s.user = :user and s.timetable BETWEEN :time1 and :time2 ORDER BY s.timetable"
                        );
        $query->setParameters(array(
            'time1' => $timetable_id[0]['id'], 
            'time2' => $timetable_id[$nbjour-1]['id'], 
            'user' => $user
            ));
        return $query->getResult();
    }

    public function findTimeMonth($date, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.id')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date LIKE :date')
           ->setParameters(array('date' => '%'.$date.'%'));
        
        $timetable_id =  $qb->getQuery()
                            ->getResult();
        $nbjour = count($timetable_id);
                
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.working_time')
           ->from('CoyoteSiteBundle:Schedule', 's')
           ->where('s.user = :user and s.timetable BETWEEN :time1 and :time2')
           ->setParameters(array(
                'time1' => $timetable_id[0]['id'], 
                'time2' => $timetable_id[$nbjour-1]['id'], 
                'user' => $user
                ));
        
        $res =  $qb->getQuery()
                    ->getResult();

        $timeend = "0";
        
        for($i = 0; $i<count($res); $i++)
        {
            $timeend += $this->calculTime($res[$i]['working_time']);
        }
        $time = $this->formatTime($timeend);
        return $time;
    }
    
    public function findAbsenceMonth($date, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.id')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date LIKE :date')
           ->setParameters(array('date' => '%'.$date.'%'));
        
        $timetable_id =  $qb->getQuery()
                            ->getResult();
        $nbjour = count($timetable_id);
                
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.absence')
           ->from('CoyoteSiteBundle:Schedule', 's')
           ->where('s.user = :user and s.timetable BETWEEN :time1 and :time2')
           ->setParameters(array(
                'time1' => $timetable_id[0]['id'], 
                'time2' => $timetable_id[$nbjour-1]['id'], 
                'user' => $user
                ));
        
        $res =  $qb->getQuery()
                    ->getResult();

        $aucune = 0;
        $rtt = 0;
        $cp = 0;
        $ca = 0;
        
        for($i = 0; $i<count($res); $i++)
        {
            if($res[$i]['absence'] == "aucune")
                $aucune++;
            if($res[$i]['absence'] == "rtt")
                $rtt++;
            if($res[$i]['absence'] == "ca")
                $ca++;
            if($res[$i]['absence'] == "cp")
                $cp++;
        }
        $absence = $aucune.';'.$rtt.';'.$ca.';'.$cp;
        return $absence;
    }
    
    public function findAbsenceYear($mois, $annee, $user, $absence)
    {
        if($mois >= "01" && $mois <= "05")
        {   
            $annee--;
            $datedeb = '01/06/'.$annee;
            $annee ++;
            $datefin = '31/05/'.$annee;
        }
        if($mois >= "06" && $mois <= "12")
        {
            $datedeb = '01/06/'.$annee;
            $annee++;
            $datefin = '31/05/'.$annee;
        }
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date = :date')
           ->setParameters(array('date' => $datedeb));        
        $firstiddate =  $qb->getQuery()
                           ->getResult(); //Id de tous les jours des mois
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date = :date')
           ->setParameters(array('date' => $datefin));        
        $lastiddate =  $qb->getQuery()
                          ->getResult(); //Id de tous les jours des mois

        
        
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.id')
           ->from('CoyoteSiteBundle:Schedule', 's')
           ->where('s.absence = :value and s.user = :user and s.timetable BETWEEN :datedeb and :datefin')
           ->setParameters(array('datedeb' => $firstiddate, 'datefin' => $lastiddate, 'value' => $absence, 'user' => $user));        
        $res = $qb->getQuery()
                  ->getResult(); //Id de tous les jours des mois
        
        return count($res);
    }
        
    public function calculTime($time)
    {
        $time = explode(":", $time);
        $minute = $time[1];
        $heure = $time[0];
        $timefinal = $heure * 60 + $minute;
        return $timefinal;
    }
    
    public function formatTime($time)
    {
    	$h = number_format($time / 60);
    	$m = $time % 60;
    	if($m == "0")
    	    $m = "00";
        if(strlen($m) < 2)
            $m = '0'.$m;
    	$restime = $h.'h'.$m;
    	return $restime;
    }
    
    public function findDataBE($mois, $annee, $user)
    {        
        $date = "%/".$mois."/".$annee."%";
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date LIKE :date')
           ->setParameters(array('date' => $date));
        $timetable = $qb->getQuery()
                        ->getResult();
        $nbtimetable = count($timetable);
        
        $i = 0;
        foreach($timetable as $tab)
        {
            $id[$i] = $tab->getId();
            $i++;
        }
        
        $timetable_iddeb = number_format($id[0]) - 7; // 7 jours avant le debut du mois
        $timetable_idfin = number_format($id[$nbtimetable-1]) + 7; // 7 jours apres la fin du mois
        
        $qb->select('s')
           ->from('CoyoteSiteBundle:Schedule', 's')
           ->where('s.user = :id and s.timetable BETWEEN :timedeb and :timefin')
           ->setParameters(array('id' => $user, 'timedeb' => $timetable_iddeb, 'timefin' => $timetable_idfin));
        $scheduleuser = $qb->getQuery()
                           ->getResult();
        return $scheduleuser;
    }
    
    public function findforBE($user, $date, $year, $user_name)
    {
        $week = $this->findNoWeek($date, $user);
        $result = $user_name;
        
        foreach($week as $data)
        {
            $result .= $this->findTimebyWeek($user, $data, $year);
        }
        return $result;
    }
    
    public function findTimebyWeek($user, $week, $year)
    {    
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t.id')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.no_week = :week and t.year = :year')
           ->setParameters(array('week' => $week, 'year' => $year));
        
        $timetable_id =  $qb->getQuery()
                            ->getResult();
        $nbjour = count($timetable_id);
        
        $timetable_idstart = $timetable_id[0]['id'];
        $timetable_idend = $timetable_id[$nbjour-1]['id'];
    
        $query = $this->getEntityManager()
                      ->createQuery("
                        SELECT s FROM CoyoteSiteBundle:Schedule s
                        WHERE s.user = :user and s.timetable BETWEEN :time1 and :time2 "
                        );
        $query->setParameters(array(
            'time1' => $timetable_idstart, 
            'time2' => $timetable_idend, 
            'user' => $user
            ));
        $res = $query->getResult();
        $timeres = 0;
        $result = "\r\n";
        foreach($res as $data)
        {
            $result .= $data->getTimetable()->getDay().';'.$data->getTimetable()->getDate().';';
            $result .= $data->getStart().";".$data->getEnd().";".$data->getBreak().";".$data->getWorkingTime().";".$data->getWorkingHours().";";
            $result .= $data->getTravel().";".$data->getAbsence().";".$data->getComment().";\r\n";
            
            $time = $data->getWorkingtime();
            $timeres += $this->calculTime($time);
        }
        if($timeres > 0)
            $result .= "Temps de travail de la semaine : ".$this->formatTime($timeres).";\r\n";
        return $result;
    }
}

/*$nbweek = count($timetable_noweek);
        for($i=0;$i<$nbweek;$i++)
        {
            $j = 0;
            foreach($timetable as $data)
            {
                if($timetable_noweek[$i] == $data->getNoweek())
                {    
                    $timetable_id[$j] = $data->getId();
                    $j++;
                }
            }
            
            
        }*/
        /*$qb = $this->_em->createQueryBuilder();
        $qb->select('t')
           ->from('CoyoteSiteBundle:Timetable', 't')
           ->where('t.date LIKE :date')
           ->setParameters(array('date' => '%'.$date.'%'));
        
        $timetable =  $qb->getQuery()
                         ->getResult();*/
        
        //return $nbweek;