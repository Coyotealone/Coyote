<?php

namespace Coyote\Bundle\AttendanceBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Application\Sonata\UserBundle\Entity\User;

/**
 * ScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScheduleRepository extends EntityRepository
{
    /***********************getScheduleUserAction**********************/

    /**
     * Function to synchronize id Timetable about a same id array time.
     * @param array $time Array data Schedule
     * @param array $data_timetable Array id Timetable
     * @return array $duration Array with absence duration Schedule
     */
    public function createIdTimetableSession($time, $data_timetable, $session)
    {
        $j = 0;
        $duration = array();
        for($i=0;$i<count($time);$i++)
        {
            if (count($time[$j])>0)
            {
                if ($data_timetable[$i]->getId() == $time[$j]->getTimetable()->getId())
                {
                    $session->set('id_'.$i, $time[$j]->getId());
                    $duration[$i] = $time[$j]->getAbsenceDuration();
                    $j++;
                }
            }
            else
            {
                $session->set('id_'.$i, '');
            }
        }
        return $duration;
    }

    /**
     * Function to find data about user and timetable.
     * @access public
     * @param Timetable $timetable
     * @param User $user
     * @return null if no data, else array with data schedule
     */
    public function findAllAboutTimetableUser($timetable, $user)
    {
        $index = 0;
        $time = null;
        foreach($timetable as $data)
        {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('s')
               ->from('CoyoteAttendanceBundle:Schedule', 's')
               ->where('s.user = :user and s.timetable = :timetable')
               ->setParameters(array('user' => $user, 'timetable' => $data));
            $result = $qb->getQuery()->getOneOrNullResult();
            if($result == null)
                $time[$index] = array();
            else
                $time[$index] = $result;
            $index++;
        }
        return $time;
    }

    /******************weeklessAction**weekmoreAction******************/

    /**
     * Function to update week and period.
     * @access public
     * @param string $value "less" or "more"
     */
    public function updateWeek($value, $session)
    {
        $week = $session->get('week');
        $year = $session->get('year');
        if ($value == "less")
        {
            if ($week == 1)
            {
                $week = 53;
                $year--;
            }
            else
            {
                $week--;
            }
        }
        if ($value == "more")
        {
            if ($week == 53)
            {
                $week = 1;
                $year++;
            }
            else
            {
                $week++;
            }
        }
        $session->set('week', $week);
        $session->set('year', $year);
    }

    /**********************postScheduleUserAction**********************/

	public function postScheduleUser($user, $data)
	{
		//$schedule = $this->_em->getRepository('CoyoteAttendanceBundle:Schedule')->find(array('user' => $user, 'date' => $data['date'.$i]));
		$list_schedule = array();
        for($i=1;$i<8;$i++)
        {
	        $schedule = null;
	        
	        $date_temp = explode('/', $data['date'.$i]);
	        $date = new \DateTime(date($date_temp[2].'-'.$date_temp[1].'-'.$date_temp[0]), new \DateTimeZone('Europe/Paris'));
			
	        $qb = $this->_em->createQueryBuilder();
	        $qb->select('s')
	           ->from('CoyoteAttendanceBundle:Schedule', 's')
	           ->where('s.user = :user and s.date_schedule = :date')
	           ->setParameters(array('user' => $user, 'date' => $date));//$data['date'.$i]));
	        $schedule = $qb->getQuery()->getOneOrNullResult();
	        if (empty($schedule))
			{
				array_push($list_schedule, $this->createSchedule($user, $data, $i));
			}
			else
			{
				array_push($list_schedule, $this->updateSchedule($user, $data, $i, $schedule));
			}
        }
        return $list_schedule;
	}

	public function createSchedule($user, $data, $i)
	{
		$schedule_travel = null;
		
		if (array_key_exists('travel'.$i, $data))
            $schedule_travel = 1;
        if (!array_key_exists('travel'.$i, $data))
            $schedule_travel = 0;
            
        $schedule_start = $data['start'.$i];
        $schedule_end = $data['end'.$i];
        $schedule_break = $data['break'.$i];
        $schedule_comment = $data['comment'.$i];
        $schedule_absence = $data['absence'.$i];
        $schedule_date = $data['date'.$i];
        $date_temp = explode('/', $schedule_date);
        $schedule_date = date('Y-m-d',strtotime(date($date_temp[2].'-'.$date_temp[1].'-'.$date_temp[0])));
        $schedule_absenceday = $data['absenceday'.$i];
        $schedule_absencetime = $data['absencetime'.$i];
        
        if (empty($schedule_start) && empty($schedule_end) && empty($schedule_break) && empty($schedule_travel) && 
			empty($schedule_comment) && ($schedule_absence == "Aucune"))
        {
            return null;
        }
        else
        {
            $schedule = new Schedule();
            $schedule->setUser($user);
            $date_end = null;
            $date_break = null;
            $date_start = null;
            $schedule->setDateSchedule(new \DateTime($schedule_date), new \DateTimeZone('Europe/Paris'));
	        if (!empty($schedule_start))
	        {
    	        $schedule_start = explode(':', $schedule_start);
    	        $date_start = new \DateTime('now');
                $date_start->setTime($schedule_start[0], $schedule_start[1]);
                $schedule->setStart($date_start);
            }
            if (!empty($schedule_end))
            {
                $schedule_end = explode(':', $schedule_end);
    	        $date_end = new \DateTime('now');
                $date_end->setTime($schedule_end[0], $schedule_end[1]);
                $schedule->setEnd($date_end);
            }
            if (!empty($schedule_break))
            {
                $schedule_break = explode(':', $schedule_break);
    	        $date_break = new \DateTime('now');
                $date_break->setTime($schedule_break[0], $schedule_break[1]);
                $schedule->setBreak($date_break);
            }
            if (!empty($date_start) && !empty($date_break) && !empty($date_end))
            {
                $working_time_day = $this->working_time_day($date_start, $date_break, $date_end);
                $schedule->setWorkingTime($working_time_day);
                $working_hours_day = $this->working_hours_day($working_time_day);
            }
            $schedule->setWorkingHours(0);
            $schedule->setTravel($schedule_travel);
            $schedule->setAbsenceName($schedule_absence);
            if ($schedule_absence == "Aucune")
            {
                $schedule->setAbsenceDuration("");
            }
            else
            {
                if ($schedule_absenceday == "0.5" || $schedule_absenceday == "1")
                    $schedule->setAbsenceDuration($schedule_absenceday);
                if ($schedule_absenceday == "empty")
                    $schedule->setAbsenceDuration($schedule_absencetime);
            }
            $schedule->setComment($schedule_comment);
            $this->_em->persist($schedule);
            $this->_em->flush();
            return $schedule;
        }
	}
	
	public function updateSchedule($user, $data, $i, $schedule)
	{
		$schedule_travel = null;
		
		if (array_key_exists('travel'.$i, $data))
            $schedule_travel = 1;
        if (!array_key_exists('travel'.$i, $data))
            $schedule_travel = 0;
            
        $schedule_start = $data['start'.$i];
        $schedule_end = $data['end'.$i];
        $schedule_break = $data['break'.$i];
        $schedule_comment = $data['comment'.$i];
        $schedule_absence = $data['absence'.$i];
        $schedule_date = $data['date'.$i];
        $date_temp = explode('/', $schedule_date);
        $schedule_date = date('Y-m-d',strtotime(date($date_temp[2].'-'.$date_temp[1].'-'.$date_temp[0])));
        $schedule_absenceday = $data['absenceday'.$i];
        $schedule_absencetime = $data['absencetime'.$i];
            
		if (empty($schedule_start) && empty($schedule_end) && empty($schedule_break) && empty($schedule_travel) && 
			empty($schedule_comment) && ($schedule_absence == "Aucune"))
        {
            return null;
        }
        else
        {
            $date_start = null;
            $date_end = null;
            $date_break = null;
	        if (!empty($schedule_start))
	        {
    	        $schedule_start = explode(':', $schedule_start);
    	        $date_start = new \DateTime('now');
                $date_start->setTime($schedule_start[0], $schedule_start[1]);
                $schedule->setStart($date_start);
            }
            if (!empty($schedule_end))
            {
                $schedule_end = explode(':', $schedule_end);
    	        $date_end = new \DateTime('now');
                $date_end->setTime($schedule_end[0], $schedule_end[1]);
                $schedule->setEnd($date_end);
            }
            if (!empty($schedule_break))
            {
                $schedule_break = explode(':', $schedule_break);
    	        $date_break = new \DateTime('now');
                $date_break->setTime($schedule_break[0], $schedule_break[1]);
                $schedule->setBreak($date_break);
            }
            if ($date_start != "" && $date_end != "" && $date_break != "")
            {
                $working_time_day = $this->working_time_day($date_start, $date_end, $date_break);
                $schedule->setWorkingTime($working_time_day);
                $working_hours_day = $this->working_hours_day($working_time_day);
                $schedule->setWorkingHours($working_hours_day);
            }
            $schedule->setTravel($schedule_travel);
            $schedule->setAbsenceName($schedule_absence);
            if ($schedule_absence == "Aucune")
            {
                $schedule->setAbsenceDuration("");
            }
            else
            {
                if ($schedule_absenceday == "0.5" || $schedule_absenceday == "1")
                    $schedule->setAbsenceDuration($schedule_absenceday);
                if ($schedule_absenceday == "empty")
                    $schedule->setAbsenceDuration($schedule_absencetime);
            }
            $schedule->setComment($schedule_comment);
            $this->_em->persist($schedule);
            $this->_em->flush();
            
            return $schedule;
        }
	}
	
	public function postScheduleUserfm($user, $data)
	{
		//$schedule = $this->_em->getRepository('CoyoteAttendanceBundle:Schedule')->find(array('user' => $user, 'date' => $data['date'.$i]));
		$list_schedule = array();
        for($i=1;$i<8;$i++)
        {
	        $schedule = null;
	        
	        $date_temp = explode('/', $data['date'.$i]);
	        $date = new \DateTime(date($date_temp[2].'-'.$date_temp[1].'-'.$date_temp[0]), new \DateTimeZone('Europe/Paris'));
			
	        $qb = $this->_em->createQueryBuilder();
	        $qb->select('s')
	           ->from('CoyoteAttendanceBundle:Schedule', 's')
	           ->where('s.user = :user and s.date_schedule = :date')
	           ->setParameters(array('user' => $user, 'date' => $date));//$data['date'.$i]));
	        $schedule = $qb->getQuery()->getOneOrNullResult();
	        if (empty($schedule))
			{
				array_push($list_schedule, $this->createSchedulefm($user, $data, $i));
			}
			else
			{
				array_push($list_schedule, $this->updateSchedulefm($user, $data, $i, $schedule));
			}
        }
        return $list_schedule;
	}

	public function createSchedulefm($user, $data, $i)
	{
		$schedule_travel = null;
		
		if (array_key_exists('travel'.$i, $data))
            $schedule_travel = 1;
        if (!array_key_exists('travel'.$i, $data))
            $schedule_travel = 0;
            
        $schedule_day = $data['day'.$i];
        $schedule_comment = $data['comment'.$i];
        $schedule_absence = $data['absence'.$i];
        $schedule_date = $data['date'.$i];
        $date_temp = explode('/', $schedule_date);
        $schedule_date = date('Y-m-d',strtotime(date($date_temp[2].'-'.$date_temp[1].'-'.$date_temp[0])));
        $schedule_absenceday = $data['absenceday'.$i];
        $schedule_absencetime = $data['absencetime'.$i];
        
        if (empty($schedule_day) && empty($schedule_travel) && empty($schedule_comment) && ($schedule_absence == "Aucune"))
        {
            return null;
        }
        else
        {
            $schedule = new Schedule();
            $schedule->setUser($user);
            $schedule->setDateSchedule(new \DateTime($schedule_date), new \DateTimeZone('Europe/Paris'));
	        $schedule->setWorkingHours($schedule_day);
            $schedule->setTravel($schedule_travel);
            $schedule->setAbsenceName($schedule_absence);
            if ($schedule_absence == "Aucune")
            {
                $schedule->setAbsenceDuration("");
            }
            else
            {
                if ($schedule_absenceday == "0.5" || $schedule_absenceday == "1")
                    $schedule->setAbsenceDuration($schedule_absenceday);
                if ($schedule_absenceday == "empty")
                    $schedule->setAbsenceDuration($schedule_absencetime);
            }
            $schedule->setComment($schedule_comment);
            $this->_em->persist($schedule);
            $this->_em->flush();
            return $schedule;
        }
	}
	
	public function updateSchedulefm($user, $data, $i, $schedule)
	{
		$schedule_travel = null;
		
		if (array_key_exists('travel'.$i, $data))
            $schedule_travel = 1;
        if (!array_key_exists('travel'.$i, $data))
            $schedule_travel = 0;
		
		$schedule_day = $data['day'.$i];
        $schedule_comment = $data['comment'.$i];
        $schedule_absence = $data['absence'.$i];
        $schedule_date = $data['date'.$i];
        $date_temp = explode('/', $schedule_date);
        $schedule_date = date('Y-m-d',strtotime(date($date_temp[2].'-'.$date_temp[1].'-'.$date_temp[0])));
        $schedule_absenceday = $data['absenceday'.$i];
        $schedule_absencetime = $data['absencetime'.$i];
            
		if (empty($schedule_day) && empty($schedule_travel) && empty($schedule_comment) && ($schedule_absence == "Aucune"))
        {
            return null;
        }
        else
        {
	        $schedule->setWorkingHours($schedule_day);
            $schedule->setTravel($schedule_travel);
            $schedule->setAbsenceName($schedule_absence);
            if ($schedule_absence == "Aucune")
            {
                $schedule->setAbsenceDuration("");
            }
            else
            {
                if ($schedule_absenceday == "0.5" || $schedule_absenceday == "1")
                    $schedule->setAbsenceDuration($schedule_absenceday);
                if ($schedule_absenceday == "empty")
                    $schedule->setAbsenceDuration($schedule_absencetime);
            }
            $schedule->setComment($schedule_comment);
            $this->_em->persist($schedule);
            $this->_em->flush();
            return $schedule;
        }
	}
	
    /*************************getScheduleAction************************/

    /**
     * Function to find period about month and year.
     * @param string $month
     * @param string $year
     * @return string $period
     */
    public function findPeriodAboutMonthYear($month, $year)
    {
        $period = "";
        if ($month >= "01" && $month <= "05")
        {
            $previous_year = $year - 1;
            $period = $previous_year."/".$year;
        }
        if ($month >= "06" && $month <= "12")
        {
            $following_year = $year + 1;
            $period = $year."/".$following_year;
        }
        return $period;
    }

    /**
     * Function to count number absence.
     * @access public
     * @param datetime $date
     * @param User $user
     * @param string $absence
     * @return number
     */
    public function countAbsenceMonth($date, $user_id, $absence)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.absence_duration')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.user = :user and s.date_schedule LIKE :date and s.absence_name = :absence')
           ->setParameters(array('user' => $user_id, 'date' => $date, 'absence' => $absence));
        $data_absence_duration = $qb->getQuery()
                                    ->getResult();
        $count_absence = 0.0;
        for($i = 0; $i<count($data_absence_duration);$i++)
        {
            $count_absence += $data_absence_duration[$i]['absence_duration'];
        }
        return $count_absence;
    }

    /**
     * Function to count number absence about a period by user and specific absence.
     * @access public
     * @param string $period
     * @param User $user
     * @param string $absence
     * @return number
     */
    public function findAbsenceYear($period, $user, $absence)
    {
	    $date_period = $this->createDateAboutPeriod($period);
	    $date_period = explode('/', $date_period);
	    $starting_period = $date_period[0];
	    $ending_period = $date_period[1];
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.absence_duration')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.user = :user and s.absence_name = :absence and s.date_schedule between :starting and :ending')
           ->setParameters(array('user' => $user, 'starting' => $starting_period, 'ending' => $ending_period, 'absence' => $absence));
        $data_absence_duration = $qb->getQuery()
                                    ->getResult();
        $count_absence = 0.0;
        for($i = 0; $i<count($data_absence_duration);$i++)
        {
            $count_absence += $data_absence_duration[$i]['absence_duration'];
        }
        return $count_absence;
    }

    /**
     * Function to count working hours in month.
     * @access public
     * @param string $date
     * @param User $user
     * @return float
     */
    public function findDayMonth($date, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.working_hours')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.date_schedule LIKE :date and s.user = :user')
           ->setParameters(array('date' => $date, 'user' => $user));
        $data_working_hours = $qb->getQuery()->getResult();
        $working_day = 0.0;
        foreach($data_working_hours as $value)
        {
            $working_day = $working_day + $value['working_hours'];
        }
        return $working_day;
    }

    /**
     * Function to count working hours in period.
     * @access public
     * @param mixed $period
     * @param mixed $user
     * @return number
     */
    public function findDayYear($period, $user)
    {
	    $date_period = $this->createDateAboutPeriod($period);
	    $date_period = explode('/', $date_period);
	    $starting_period = $date_period[0];
	    $ending_period = $date_period[1];
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.working_time')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.user = :user and s.date_schedule between :starting and :ending and s.working_time > 0')
           ->setParameters(array('user' => $user, 'starting' => $starting_period, 'ending' => $ending_period));
        $data_working_hours = $qb->getQuery()->getResult();
        $working_day = 0.0;
        foreach($data_working_hours as $value)
        {
            $working_day = $working_day + $value['working_time'];
        }
        return $working_day;
    }

    /**
     * Function to calculate working time by week.
     * @access public
     * @param Schedule $dataschedule
     * @return string $timeweek if $dataschedule is empty $timeweek = ''
     * else $timeweek is string format 'hh:mm'
     */
    public function countTimeWeek($dataschedule)
    {
        if(count($dataschedule)>0)
        {
            $week = $dataschedule[0]['date_schedule']->format('W');
            $index = 0;
            $value = 0;
            $timeweek = '';
            $count_item = count($dataschedule)-1;
            for($i=0;$i<count($dataschedule);$i++)
            {
                if ($week == $dataschedule[$i]['date_schedule']->format('W'))
                {
                    if (!empty($dataschedule[$i]['working_time']))
                        $value += $this->convertTimeinMinutes($dataschedule[$i]['working_time']);
                    $week = $dataschedule[$i]['date_schedule']->format('W');
                }
                if ($count_item == $i)
                {
                    $timeweek[$index] = $this->createFormatTime($value);
                    $value=0;
                    $index++;
                    if (!empty($dataschedule[$i]['working_time']))
                        $value += $this->convertTimeinMinutes($dataschedule[$i]['working_time']);
                    $timeweek[$index] = $this->createFormatTime($value);
                }
                if ($week != $dataschedule[$i]['date_schedule']->format('W'))
                {
                    $timeweek[$index] = $this->createFormatTime($value);
                    $value=0;
                    $index++;
                    if (!empty($dataschedule[$i]['working_time']))
                        $value += $this->convertTimeinMinutes($dataschedule[$i]['working_time']);
                    $week = $dataschedule[$i]['date_schedule']->format('W');
                }
            }
        }
        else
        {
            $timeweek = '';
        }
        return $timeweek;
    }

    /**
     * Function to count working time by month.
     * @access public
     * @param string $date
     * @param User $user
     * @return string total working time
     */
    public function findTimeMonth($date, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.working_time')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.user = :user and s.date_schedule LIKE :date')
           ->setParameters(array('user' => $user, 'date' => $date));
        $workingtime_schedule =  $qb->getQuery()
                                    ->getResult();
        $timeend = "0";
        for($i = 0; $i<count($workingtime_schedule); $i++)
        {
            $timeend += $this->convertTimeinMinutes($workingtime_schedule[$i]['working_time']);
        }
        $time = $this->createFormatTime($timeend);
        return $time;
    }

    /**
     * Function to find data schedule for technician user by month.
     * @access public
     * @param User $user
     * @param string $date
     * @return Schedule
     */
    public function findAboutDateUser($user, $date)
    {
        $date = $date."%";
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.date_schedule, s.start, s.end, s.break, s.working_time, s.working_hours, s.travel, s.absence_name,
            s.absence_duration, s.comment')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.date_schedule LIKE :date and s.user = :user ')
           ->orderBy('s.date_schedule')
           ->setParameters(array('date' => $date, 'user' => $user, ));
        $dataschedule = $qb->getQuery()
                           ->getResult();
        return $dataschedule;
    }

    /**
     * Function to find data schedule for framework user by month.
     * @access public
     * @param User $user
     * @param string $date
     * @return Schedule
     */
    public function findAboutDateUserFM($user, $date)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.date_schedule, s.working_hours, s.travel, s.absence_name, s.absence_duration, s.comment')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.date_schedule LIKE :date and s.user = :user')
           ->orderBy('s.date_schedule')
           ->setParameters(array('date' => $date, 'user' => $user));
        $dataschedule = $qb->getQuery()->getResult();
        return $dataschedule;
    }

    /************************Absence:indexAction***********************/

    /**
     * Get the paginated list of absences in Schedule Entity.
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $sortby
     * @return Paginator
     */
    public function getListAbsenceUser($user, $page=1, $maxperpage=10)
    {
        $q = $this->_em->createQueryBuilder()
                  ->select('s')
                  ->from('CoyoteAttendanceBundle:Schedule','s')
                  ->where('s.user = :user and not s.absence_name =:absence')
                  ->orderBy('s.date_schedule', 'DESC')
                  ->setParameters(array('user' => $user, 'absence' => 'Aucune' ));

        $q->setFirstResult(($page-1) * $maxperpage)
          ->setMaxResults($maxperpage);
        return new Paginator($q);
    }

    /**
     * Function to find absence by User.
     * @param User $user
     * @return Schedule $entities
     */
    public function findAllByUserAbsence($user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s')
            ->from('CoyoteAttendanceBundle:Schedule', 's')
            ->where('s.user = :user and not s.absence_name = :absence')
            ->orderBy('s.date_schedule', 'ASC')
            ->setParameters(array(
                        'user' => $user,
                        'absence'  => 'Aucune',
        ));
        $entities = $qb->getQuery()->getResult();
        return $entities;
    }

    /*******************Admin:exportDataUserAction******************/

    /**
     * Function to retrieve data user about a date.
     * @param User $user
     * @param string $date date format 'Y-m-%'
     * @return Schedule Entity
     */
    public function findAboutUserBE($user, $date)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.date_schedule, s.start, s.end, s.break, s.working_time, s.working_hours, s.comment,
            s.travel, s.absence_name, s.absence_duration')
                ->from('CoyoteAttendanceBundle:Schedule', 's')
                ->where('s.date_schedule LIKE :date and s.user = :user')
                ->setParameters(array('date' => $date, 'user' => $user));
        $timetableschedule = $qb->getQuery()->getResult();
        return $timetableschedule;
    }

    /**
     * Function to generate file for Chef_BE with data users.
     * @param array $tab_user_id Id User who work to Chef_BE
     * @param string $month
     * @param string $year
     * @return string data users
     */
    public function createFileUserBE($tab_user_id, $month, $year)
    {
        $result = "";
        $week = 0;
        foreach($tab_user_id as $user_id)
        {
            $timetableschedule = $this->findAboutUserBE($user_id, $year.'-'.$month.'-%');
            $timeres = 0;
            $user_name = $this->findNameUser($user_id);
            $result .= $user_name[0]['firstname'].' '.$user_name[0]['lastname'].";\r\n\r\n";
            foreach($timetableschedule as $data)
            {
                if($week != 0 && $data['date_schedule']->format('W') != $week)
                {
                    $result .= "Temps de travail de la semaine : ".$this->createFormatTime($timeres).";\r\n\r\n";
                    $timeres = 0;
                }
                $week = $data['date_schedule']->format('W');
                $result .= $data['date_schedule']->format('l').';'.$data['date_schedule']->format('Y-m-d').';';
                if ($data['start'] == null)
        		    $result .= ";";
                else
        		    $result .= $data['start']->format("H:i").";";
        		if ($data['end'] == null)
        		    $result .= ";";
                else
        		    $result .= $data['end']->format("H:i").";";
                if ($data['break'] == null)
        		    $result .= ";";
                else
        		    $result .= $data['break']->format("H:i").";";
                if ($data['working_time'] == null)
        		    $result .= ";";
                else
        		$result .= $data['working_time']->format("H:i").";";
                $result .= $data['working_hours'].";";
                $result .= $data['travel'].";".$data['absence_name'].";".$data['absence_duration'].";";
                $result .= $data['comment'].";\r\n";
                $timeres += $this->convertTimeinMinutes($data['working_time']).";\r\n";
                if ($data === end($timetableschedule))
                {
                    $result .= "Temps de travail de la semaine : ".$this->createFormatTime($timeres).";\r\n\r\n";
                    $timeres = 0;
                }
            }
        }
        return $result;
    }
    
    /**
     * nameUser function.
     *
     * @access public
     * @param mixed $user
     * @return string
     */
    public function findNameUser($user)
    {
    	$qb = $this->_em->createQueryBuilder();
    	$qb->select('u.firstname, u.lastname')
    	   ->from('ApplicationSonataUserBundle:User', 'u')
    	   ->where('u.id = :user')
    	   ->setParameters(array('user' => $user));
    	$user_name = $qb->getQuery()->getResult();
    	return $user_name;
    }

    /*****************************Commun****************************/

    /**
     * Function to convert time in minutes.
     * @access public
     * @param string $time
     * @return number integer minutes
     */
    private function convertTimeinMinutes($time)
    {
        if ($time == "0:00")
            return 0;
        if ($time == null)
            return 0;
        $time = explode(":", $time->format('H:i:s'));
        $minute = $time[1];
        $heure = $time[0];
        $timefinal = $heure * 60 + $minute;
        return $timefinal;
    }

    /**
     * Function to convert time in hours.
     *
     * @access public
     * @param mixed $time
     * @return string format hh:mm
     */
    private function createFormatTime($time)
    {
        date_default_timezone_set('UTC');
        $time = $time * 60;
        $heures=intval($time / 3600);
        $minutes=intval(($time % 3600) / 60);
        if (strlen($minutes) < 2)
        {
            $minutes = '0'.$minutes;
        }
        return $heures.'h'.$minutes;
    }

    /**********************putAbsenceWeekAction*********************/

    /**
     * Function to save absence into Schedule entity.
     * @param string $date_start
     * @param string $date_end
     * @param User $user
     * @param array $data
     * @return number Number schedule save
     */
    public function putAbsenceWeek($date_start, $date_end, $user, $data)
    {
        $date_start = new \DateTime($date_start, new \DateTimeZone('Europe/Paris'));
        $date_end = new \DateTime($date_end, new \DateTimeZone('Europe/Paris'));

        $qb = $this->_em->createQueryBuilder();
        $qb->select('s')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.date_schedule between :date_start and :date_end')
           ->setParameters(array(
                        'date_start' => $date_start->format('Y-m-d'),
                        'date_end' => $date_end->format('Y-m-d')));
        $timetables = $qb->getQuery()->getResult();
        $countsave = 0;
        for($i=0; $i<count($timetables);$i++)
        {
	        $qb = $this->_em->createQueryBuilder();
	        $timetable = $timetables[$i];
	        if (($timetable->getDate()->format('l') != "Sunday") && ($timetable->getDate()->format('l') != "Saturday"))
	        {
	        $countsave++;
	        $qb->select('s')
        	   ->from('CoyoteAttendanceBundle:Schedule', 's')
        	   ->where('s.user = :user and s.date_schedule = :timetable')
               ->setParameters(array('user' => $user,
                                     'timetable' => $timetable));
                $schedule = $qb->getQuery()->getOneOrNullResult();
                if ($schedule == null)
                {
	                $schedule = new Schedule();
	                $schedule->setUser($user);
	                $schedule->setStart('0:00');
	                $schedule->setBreak('0:00');
	                $schedule->setEnd('0:00');
	                $schedule->setWorkingTime('0:00');
	                $schedule->setWorkingHours('0');
	                $schedule->setTimetable($timetable);
	                $schedule->setAbsenceName($data['absence_name']);
                	$schedule->setAbsenceDuration($data['absence_duration']);
	                if (isset($data['travel']))
	                {
	                	$schedule->setTravel($data['travel']);
	                }
                    else
                    {
                        $schedule->setTravel('0');
                	}
                	$schedule->setComment($data['comment']);
                    $this->_em->persist($schedule);
                }
                else
                {
                	$schedule->setStart('0:00');
                    $schedule->setBreak('0:00');
                    $schedule->setEnd('0:00');
                    $schedule->setWorkingTime('0:00');
                    $schedule->setWorkingHours('0');
                    $schedule->setAbsenceName($data['absence_name']);
                    $schedule->setAbsenceDuration($data['absence_duration']);
                    if (isset($data['travel']))
                    {
                        $schedule->setTravel($data['travel']);
                    }
                    else
                    {
                    	$schedule->setTravel('0');
                    }
                    $schedule->setComment($data['comment']);
        			$this->_em->persist($schedule);
                }
	        }
            $qb = null;
        }
        $this->_em->flush();
        return $countsave;
    }

    /********************postScheduleLockedAction*******************/

        /**
         * Function to lock Schedule
         * @param DateTime $date
         */
        public function postScheduleLocked($date, $user)
        {
        	$qb = $this->_em->createQueryBuilder();
        	$qb->select('s')
        	   ->from('CoyoteAttendanceBundle:Schedule', 's')
        	   ->where('s.date_schedule < :date and s.locked != 1')
        	   ->setParameters(array('date' => $date));
        	$schedules = $qb->getQuery()->getResult();
        	foreach($schedules as $schedule)
        	{
        		$schedule->setLocked(1);
        		$schedule->setLockedAt(new \DateTime(), new \DateTimeZone('Europe/Paris'));
        		$schedule->setLockedBy($user->getName());
        		$this->_em->persist($schedule);
        	}
        	$this->_em->flush();
        	return "OK";
        }
        
        public function createFileUser($user, $period)
        {
            $date_period = $this->createDateAboutPeriod($period);
    	    $date_period = explode('/', $date_period);
    	    $starting_period = $date_period[0];
    	    $ending_period = $date_period[1];
        	$qb = $this->_em->createQueryBuilder();
        	$qb->select('s.date_schedule, s.start, s.end, s.break, s.working_time, s.working_hours, s.comment,
            s.travel, s.absence_name, s.absence_duration')
                    ->from('CoyoteAttendanceBundle:Schedule', 's')
                    ->where('s.user = :user and s.date_schedule BETWEEN :date_start and :date_end')
                    ->orderBy('s.date_schedule')
                    ->setParameters(array('date_start' => $starting_period, 'date_end' => $ending_period, 'user' => $user));
        	$timetableschedule = $qb->getQuery()->getResult();
        	$result = "Jour;Date;Debut;Fin;Pause;Temps de travail;Jour travaille;Déplacement;Absence;Duree de l'absence;Commentaire;\r\n";
        	$week = 0;
        	$timeres = 0;
        	foreach($timetableschedule as $data)
        	{
        		if($week != 0 && $data['date_schedule']->format('W') != $week)
        		{
        			$result .= "Temps de travail de la semaine :;;;;;".$this->createFormatTime($timeres).";\r\n\r\n";
        			$timeres = 0;
        		}
        		$week = $data['date_schedule']->format('W');
        		$result .= $data['date_schedule']->format('l').';'.$data['date_schedule']->format('Y-m-d').';';
        		if ($data['start'] == null)
        		    $result .= ";";
                else
        		    $result .= $data['start']->format("H:i").";";
        		if ($data['end'] == null)
        		    $result .= ";";
                else
        		    $result .= $data['end']->format("H:i").";";
                if ($data['break'] == null)
        		    $result .= ";";
                else
        		    $result .= $data['break']->format("H:i").";";
                if ($data['working_time'] == null)
        		    $result .= ";";
                else
        		$result .= $data['working_time']->format("H:i").";";
        		$result .= $data['working_hours'].";";
        		$result .= $data['travel'].";".$data['absence_name'].";".$data['absence_duration'].";".$data['comment'].";\r\n";
        		$timeres += $this->convertTimeinMinutes($data['working_time']).";\r\n";
        		if ($data === end($timetableschedule))
        		{
        			$result .= "Temps de travail de la semaine :;;;;;".$this->createFormatTime($timeres).";\r\n\r\n";
        			$timeres = 0;
        		}
        	}
        	return $result;
        }
        
        public function createFileUserFM($user, $period)
        {
            $date_period = $this->createDateAboutPeriod($period);
    	    $date_period = explode('/', $date_period);
    	    $starting_period = $date_period[0];
    	    $ending_period = $date_period[1];
        	$qb = $this->_em->createQueryBuilder();
        	$qb->select('s.date_schedule, s.working_hours, s.comment, s.travel, s.absence_name, s.absence_duration')
                    ->from('CoyoteAttendanceBundle:Schedule', 's')
                    ->where('s.user = :user and s.date_schedule BETWEEN :date_start and :date_end')
                    ->orderBy('s.date_schedule')
                    ->setParameters(array('date_start' => $starting_period, 'date_end' => $ending_period, 'user' => $user));
        	$timetableschedule = $qb->getQuery()->getResult();
        	$result = "Jour;Date;Jour travaille;Déplacement;Absence;Duree de l'absence;Commentaire;\r\n";
        	$week = 0;
        	$timeres = 0;
        	foreach($timetableschedule as $data)
        	{
        		if($week != 0 && $data['date_schedule']->format('W') != $week)
        		{
        			$result .= ";\r\n\r\n";
        			$timeres = 0;
        		}
        		$week = $data['date_schedule']->format('W');
        		$result .= $data['date_schedule']->format('l').';'.$data['date_schedule']->format('Y-m-d').';';
        		$result .= $data['working_hours'].";";
        		$result .= $data['travel'].";".$data['absence_name'].";".$data['absence_duration'].";".$data['comment'].";\r\n";
        		
        	}
        	return $result;
        }

    /******************************************************************/
    /***********************Fonctions en cours*************************/
    /******************************************************************/

    public function countOvertime($user, $working_time_week)
    {
    	$query = $this->_em->createQuery(
    			"SELECT s FROM CoyoteAttendanceBundle:Schedule s WHERE s.timetable IN
    			(SELECT t.id FROM CoyoteAttendanceBundle:Timetable t WHERE
    			 DAYOFWEEK(t.date) != 1 and DAYOFWEEK(t.date) != 7 and t.holiday = 0)
    			and s.user = :user and s.comment != :comment and s.absence_duration != 1")
    				->setParameters(array(
    			'user' => $user,
    			//'period'  => '2014/2015',
    			'comment' => 'IMIE'
    	));

    	$schedules = $query->getResult();
    	$res = 0;
    	foreach($schedules as $data)
    	{
    		$workingtime = $data->getWorkingTime();
    		$res += $this->convertTimeinMinutes($workingtime);
    	}
    	$hour = 7;
    	if ($working_time_week != 0)
    		$hour = $working_time_week / 5;
    	$time = count($schedules)*$hour*60;
    	$hs = $res - $time;
		return $this->createFormatTime($hs);
    }

	/**
     * Function to create datetime about week and year
     * @access public
     * @param string $year
     * @param string $week
     * @return DateTime
     */
    public function createDateYearWeek($year, $week)
    {
        if(strlen($week) == 1)
            $week = "0".$week;
        $date = date( "Y-m-d", strtotime($year."W".$week."1") );
        return $date;
    }
    
    /**
     * Function to search Timetable about a date.
     * @access public
     * @param DateTime $date
     * @return 7 days of Timetable if found date
     */
    public function findIdDate($date)
    {
        $date = new \DateTime($date, new \DateTimeZone('Europe/Paris'));
        $result = $date->format('N');
        if ($result > 1)
        {
            $result--;
            $date->modify("-".$result." day");
        }
    
		return $result;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
	        ->from('CoyoteAttendanceBundle:Timetable', 't')
	        ->where('t.date >= :date')
	        ->setParameters(array('date' => $date->format('Y-m-d')));
        $data_timetable = $qb->getQuery()
	        ->setMaxResults(7)
	        ->getResult();
        return $data_timetable;
    }
	
	public function dateWeek($date)
	{
		$date_array = array();
		for($i=0;$i<7;$i++)
		{
			$date_add = date('Y-m-d', strtotime("$date +".$i." day")); 
			array_push($date_array, $date_add);
		}
		return $date_array;
	}
	
	/**
     * Function to find data about user and timetable.
     * @access public
     * @param Timetable $timetable
     * @param User $user
     * @return null if no data, else array with data schedule
     */
    public function findAllAboutTimetableUserNew($date, $user)
    {
        $index = 0;
        $time = null;
        
        foreach($date as $data)
        {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('s')
               ->from('CoyoteAttendanceBundle:Schedule', 's')
               ->where('s.user = :user and s.date_schedule = :timetable')
               ->setParameters(array('user' => $user, 'timetable' => $data));
            $result = $qb->getQuery()->getOneOrNullResult();
            if($result == null)
                $time[$index] = array();
            else
                $time[$index] = $result;
            $index++;
        }
        return $time;
    }
    
    public function createPeriod($date)
    {
	    $date_explode = date_parse($date);
		$year = $date_explode['year'];
	    
	    $contractDateBegin = date('Y-m-d', strtotime($year.'-01-01'));
	    $contractDateEnd = date('Y-m-d', strtotime($year.'-05-31'));
	    
	    if (($date > $contractDateBegin) && ($date < $contractDateEnd))
	    {
		    $year_1 = $year-1;
	    	$period = $year_1.'/'.$year;
	    	return $period;
	    }
	    else
	    {
	    	$year_1 = $year+1;
	    	$period = $year.'/'.$year_1;
	    	return $period;
	    }
    }
    
    public function createDateAboutPeriod($period)
    {
	    $period_explode = explode('/', $period);
		
	    $contractDateBegin = date('Y-m-d', strtotime($period_explode[0].'-01-01'));
	    $contractDateEnd = date('Y-m-d', strtotime($period_explode[1].'-05-31'));
	    
	    return $contractDateBegin.'/'.$contractDateEnd;
    }

	public function second_to_hour($time)// Transformation d'un temps en seconde en H:M
    {
    	if($time == '0')
    		return '0:00';
    	else
    	{
    		$ss = $time % 60;
    		$m = ($time - $ss) / 60;
    		$mm = $m % 60;
    		$hh = ($m - $mm) / 60;
    		if($ss=='0')
    			$ss = '00';
    		if($mm == '0')
    			$mm = '00';
    		if($mm < '10' && $mm > '0')
    			$mm = '0'.$mm;
    		$restime = $hh.':'.$mm;
    		return $restime;
    	}
    }
    
    public function hour_to_second($time)// Transformation d'un temps en H:M en seconde
    {
    	$timesec = explode(':', $time);
    	if(count($timesec) < 2)
    		return "0";
    	if(is_numeric($timesec[0]) && is_numeric($timesec[1]))
    	{
    		$sec = 3600*$timesec[0] + 60*$timesec[1];
    		return $sec;
    	}
    	else
    		return "0";
    }
    
    public function working_time_day($start, $end, $break)// Calcul du temps de travail
    {
    	if(empty($start) && empty($end) && empty($break))
    		return null;
    	if($start == "00:00" && $end == "00:00" && $break == "00:00")
    		return new \DateTime("0:00", new \DateTimeZone('Europe/Paris'));
    	if($start == "0:00" && $end == "0:00" && $break == "0:00")
    		return new \DateTime("0:00", new \DateTimeZone('Europe/Paris'));
    	if($start != "" && $end != "" && $break != "")
    	{
        	date_default_timezone_set('UTC');
        	
        	$start = $start->format("H:i");
            $end = $end->format("H:i");
            $break = $break->format("H:i");
            
            $start = explode(':', $start);
            $start = mktime($start[0], $start[1], 0, date('n'), date('j'), date('Y'));
            
            if ($end == "0:00" || $end == "00:00")
                $end = "24:00";
            $end = explode(':', $end);
            $end = mktime($end[0], $end[1], 0, date('n'), date('j'), date('Y'));
            
            $break = explode(':', $break);
            $break = mktime($break[0], $break[1], 0, date('n'), date('j'), date('Y'));
            
            $worktime = $end - $start ;
            
            $worktime = $this->second_to_hour($worktime);
            
            $worktime = explode(':', $worktime);
            
            $worktime = mktime($worktime[0], $worktime[1], 0, date('n'), date('j'), date('Y'));
            
            $worktime = $worktime - $break;
            
            $worktime = $this->second_to_hour($worktime); // HH:mm
            
            return  new \DateTime($worktime, new \DateTimeZone('Europe/Paris'));
    	}
    	else
    	{
        	return null;
    	}
    }
    
    public function working_hours_day($worktime)// Calcul de la journée de travail
    {
    	if($worktime == "00:00" || $worktime == "0:00")
    		return 0;
    	//$worktime = $this->hour_to_second($worktime);
    	$timeday = 0;//$worktime;
    	if($timeday <= 0)
    		$timeday = 0;
    	if($timeday > 0 && $timeday <= 12600)
    		$timeday = 0.5;
    	else
    		$timeday = 1;
    	return $timeday;
    }
    
    function working_time_week($time1, $time2, $time3, $time4, $time5, $time6, $time7)
    {
    	$timetotsec = $time1 + $time2 + $time3 + $time4 + $time5 + $time6 + $time7;
    	$ss = $timetotsec % 60;
    	$m = ($timetotsec - $ss) / 60;
    	$mm = $m % 60;
    	$hh = ($m - $mm) / 60;
    	if($mm == '0')
    		$mm = '00';
    	$restime = $hh.':'.$mm;
    	return $restime;
    }
    
    public function dataScheduleYear($user, $period)
    {
	    $date_period = $this->createDateAboutPeriod($period);
	    $date_period = explode('/', $date_period);
	    $starting_period = $date_period[0];
	    $ending_period = $date_period[1];
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.working_time, s.date_schedule, s.start, s.end, s.break, s.travel, s.absence_name, s.absence_duration, s.comment')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.user = :user and s.date_schedule between :starting and :ending')
           ->setParameters(array('user' => $user, 'starting' => $starting_period, 'ending' => $ending_period))
           ->orderBy('s.date_schedule');
        $schedules = $qb->getQuery()->getResult();
        
        return $schedules;
    }
    
    public function dataScheduleFMYear($user, $period)
    {
	    $date_period = $this->createDateAboutPeriod($period);
	    $date_period = explode('/', $date_period);
	    $starting_period = $date_period[0];
	    $ending_period = $date_period[1];
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.working_hours, s.date_schedule, s.travel, s.absence_name, s.absence_duration, s.comment')
           ->from('CoyoteAttendanceBundle:Schedule', 's')
           ->where('s.user = :user and s.date_schedule between :starting and :ending')
           ->setParameters(array('user' => $user, 'starting' => $starting_period, 'ending' => $ending_period))
           ->orderBy('s.date_schedule');
        $schedules = $qb->getQuery()->getResult();
        
        return $schedules;
    }
    
    /**
     * find period respect to date function.
     *
     * @access public
     * @param mixed $date
     * @return timetable pay_period
     */
    public function findPeriodByDate($date)
    {
	    $period = $this->createPeriod($date);
	    return $period;
    }
    
    public function allAbsencesMonth($month,$year,$user)
    {
        $absences = array();
        $date = $year."-".$month."-%";
        array_push($absences, $this->countAbsenceMonth($date, $user->getId(), "CA"));
        array_push($absences, $this->countAbsenceMonth($date, $user->getId(), "CP"));
        array_push($absences, $this->countAbsenceMonth($date, $user->getId(), "RTT"));
        return $absences;
    }
    
    public function allAbsencesYear($month,$year,$user)
    {
        $period = $this->findPeriodAboutMonthYear($month, $year);
        $absences = array();
        array_push($absences, $this->findAbsenceYear($period, $user, "CA"));
        array_push($absences, $this->findAbsenceYear($period, $user, "CP"));
        array_push($absences, $this->findAbsenceYear($period, $user, "RTT"));
        return $absences;
    }
	
	public function allAbsencesYearAboutPeriod($period,$user)
    {
        $absences = array();
        array_push($absences, $this->findAbsenceYear($period, $user, "CA"));
        array_push($absences, $this->findAbsenceYear($period, $user, "CP"));
        array_push($absences, $this->findAbsenceYear($period, $user, "RTT"));
        return $absences;
    }
	
	
	public function findMonth()
    {
	    $tab_month = array();
	    for($i=1;$i<=12;$i++)
	    {
		    if($i<10)
		    	$value = 'month_0'.$i;
		    else
		    	$value = 'month_'.$i;
		    array_push($tab_month, $value);
	    }
	    return $tab_month;
    }
    
    public function findNumMonth()
    {
	    $tab_num_month = array();
	    for($i=1;$i<=12;$i++)
	    {
		    if($i<10)
		    	$value = '0'.$i;
		    else
		    	$value = $i;
		    array_push($tab_num_month, $value);
	    }
	    return $tab_num_month;
    }
    
    public function findYear()
    {
	    $year = date('Y');
	    $year = $year-2;
	    $tab_year = array();
	    for($i=0;$i<5;$i++)
	    {
		    array_push($tab_year, $year+$i);
	    }
	    return $tab_year;
    }
    
    public function findNumYear()
    {
        $year = date('Y');
        $year = $year-2;
        $tab_year = array();
        for($i=0;$i<5;$i++)
	    {
		    array_push($tab_year, $year);
		    $year++;
	    }
	    return $tab_year;
    }
    
    public function findPeriod()
    {
	    $year = date('Y');
	    $year = $year-2;
	    $tab_period = array();
	    for($i=0;$i<4;$i++)
	    {
		    $year_1 = $year+1;
		    $period = $year."/".$year_1;
		    array_push($tab_period, $period);
		    $year++;
	    }
	    return $tab_period;
    }
	
	public function findHoliday($date)
    {
        $year = $date->format('Y');
        $month = $date->format('m');
        $day = $date->format('d');
        
        $jourdelan = "-01-01";
        $fetetravail = "-05-01";
        $huitmai = "-05-08";
        $fetenationale = "-07-14";
        $assomption = "-08-15";
        $toussaint = "-11-01";
        $armistice = "-11-11";
        $noel = "-12-25";
        	
    	if($date == $year."06-01")
    		return 1;
    	if($date->format("Y-m-d") == $year.$jourdelan)
    		return 1;
    	if($date->format("Y-m-d") == $this->lundiPaques($year))
    		return 1;
    	if($date->format("Y-m-d") == $year.$fetetravail)
    		return 1;
    	if($date->format("Y-m-d") == $year.$huitmai)
    		return 1;
    	if($date->format("Y-m-d") == $this->jeudiAscension($year))
    		return 1;
    	if($date->format("Y-m-d") == $this->lundiPentecote($year))
    		return 1;
    	if($date->format("Y-m-d") == $year.$fetenationale)
    		return 1;
    	if($date->format("Y-m-d") == $year.$assomption)
    		return 1;
    	if($date->format("Y-m-d") == $year.$toussaint)
    		return 1;
    	if($date->format("Y-m-d") == $year.$armistice)
    		return 1;
    	if($date->format("Y-m-d") == $year.$noel)
    		return 1;
    	else
    	    return 0;
    }
    
    public function lundiPaques($year)
    {
    	date_default_timezone_set('Europe/Paris');
    	date_default_timezone_set('UTC');
    	$date_paques = $this->paques(0, $year);
    	$date = date('Y-m-d', strtotime("$date_paques +1 day"));
    	return $date;
    }
    
    public function jeudiAscension($year)
    {
    	date_default_timezone_set('Europe/Paris');
    	date_default_timezone_set('UTC');
    	$date_paques = $this->paques(0, $year);
    	$date = date('Y-m-d', strtotime("$date_paques +39 day"));
    	return $date;
    }
    
    public function lundiPentecote($year)
    {
    	date_default_timezone_set('Europe/Paris');
    	date_default_timezone_set('UTC');
    	$date_paques = $this->paques(0, $year);
    	$date = date('Y-m-d', strtotime("$date_paques +50 day"));
    	return $date;
    }
    
    public function paques($Jourj=0, $annee=NULL)
    {
        /* *** Algorithme de Oudin, calcul de Pâque postérieure à 1583 ***
         * Transcription pour le langage PHP par david96 le 23/03/2010
         * *** Source : www.concepteursite.com/paques.php ***
         * Attributs de la fonction :
         * $Jourj : représente le jour de la semaine
         * (0=dimanche, 1=lundi...)
         * par défaut c'est le dimanche
         * $annee : représente l'année recherchée pour la date de Pâques
         * par défaut c'est l'année en cours.
         * */
        $annee=($annee==NULL) ? date("Y") : $annee;
    
        $G = $annee%19;
        $C = floor($annee/100);
        $C_4 = floor($C/4);
        $E = floor((8*$C + 13)/25);
        $H = (19*$G + $C - $C_4 - $E + 15)%30;
    
        if($H==29)
        {
            $H=28;
        }
        elseif($H==28 && $G>10)
        {
            $H=27;
        }
        $K = floor($H/28);
        $P = floor(29/($H+1));
        $Q = floor((21-$G)/11);
        $I = ($K*$P*$Q - 1)*$K + $H;
        $B = floor($annee/4) + $annee;
        $J1 = $B + $I + 2 + $C_4 - $C;
        $J2 = $J1%7; //jour de pâques (0=dimanche, 1=lundi....)
        $R = 28 + $I - $J2; // résultat final :)
        $mois = $R>30 ? 4 : 3; // mois (1 = janvier, ... 3 = mars...)
        $Jour = $mois==3 ? $R : $R-31;
    
        return date("Y-m-d",mktime(0,0,0,$mois,$Jour+$Jourj,$annee));
    }
    
	public function dataTech($user,$month,$year)
	{
    	$data_tech = array();
    	$date = $year."-".$month."-%";
        $data_schedule = $this->findAboutDateUser($user, $date);
        array_push($data_tech, $data_schedule);
        array_push($data_tech, $this->countTimeWeek($data_schedule));
        array_push($data_tech, $this->findTimeMonth($date, $user));
        $date = array();
        $day = array();
        $week = array();
        $holiday = array();
        for ($i=0;$i<count($data_schedule);$i++)
        {
            $day[$i] = $data_schedule[$i]['date_schedule']->format('l');
            $date[$i] = $data_schedule[$i]['date_schedule']->format('d/m/Y');
            $week[$i] = $data_schedule[$i]['date_schedule']->format('W');
            $holiday[$i] = $this->findHoliday($data_schedule[$i]['date_schedule']);
        }
        array_push($data_tech, $day);
        array_push($data_tech, $date);
        array_push($data_tech, $week);
        array_push($data_tech, $holiday);
        return $data_tech;
	}
    
    public function dataTechYear($period, $user)
    {
        $data_tech = array();
        $data_schedule = $this->dataScheduleYear($user, $period);
        array_push($data_tech, $data_schedule);
		array_push($data_tech, $this->countTimeWeek($data_schedule));
		$date = array();
		$day = array();
		$week = array();
		$holiday = array();
		for ($i=0;$i<count($data_schedule);$i++)
		{
			$day[$i] = $data_schedule[$i]['date_schedule']->format('l');
			$date[$i] = $data_schedule[$i]['date_schedule']->format('d/m/Y');
			$week[$i] = $data_schedule[$i]['date_schedule']->format('W');
			$holiday[$i] = $this->findHoliday($data_schedule[$i]['date_schedule']);
		}
        array_push($data_tech, $day);
        array_push($data_tech, $date);
        array_push($data_tech, $week);
        array_push($data_tech, $holiday);
        return $data_tech;
    }
    
    public function dataCadre($user,$month,$year)
	{
    	$data_cadre = array();
    	$period = $this->findPeriodAboutMonthYear($month, $year);
        $date = $year."-".$month."-%";
        array_push($data_cadre, $this->findDayMonth($date, $user));
        array_push($data_cadre, $this->findDayYear($period, $user));
        $data_schedule = $this->findAboutDateUserFM($user, $date);
        array_push($data_cadre, $data_schedule);
        for ($i=0;$i<count($data_schedule);$i++)
		{
			//$day[$i] = $data_schedule[$i]['date_schedule']->format('l');
			//$date[$i] = $data_schedule[$i]['date_schedule']->format('d/m/Y');
			//$week[$i] = $data_schedule[$i]['date_schedule']->format('W');
			$holiday[$i] = $this->findHoliday($data_schedule[$i]['date_schedule']);
		}
		array_push($data_cadre, $holiday);
        return $data_cadre;
	}
	
	public function dataCadreYear($period, $user)
	{
    	$data_cadre = array();
        $data_schedule = $this->dataScheduleFMYear($user, $period);
        array_push($data_cadre, $data_schedule);
		$date = array();
		$day = array();
		$week = array();
		$holiday = array();
		for ($i=0;$i<count($data_schedule);$i++)
		{
			$day[$i] = $data_schedule[$i]['date_schedule']->format('l');
			$date[$i] = $data_schedule[$i]['date_schedule']->format('d/m/Y');
			$week[$i] = $data_schedule[$i]['date_schedule']->format('W');
			$holiday[$i] = $this->findHoliday($data_schedule[$i]['date_schedule']);
		}
        array_push($data_cadre, $day);
        array_push($data_cadre, $date);
        array_push($data_cadre, $week);
        array_push($data_cadre, $holiday);
        return $data_cadre;
	}
	
	public function findUserBe($role)
    {
	    $qb = $this->_em->createQueryBuilder();
        $qb->select('u.id')
           ->from('ApplicationSonataUserBundle:User', 'u')
           ->where('u.roles LIKE :role')
           ->orderBy('u.id')
           ->setParameters(array('role' => $role));
        $ids_user_be = $qb->getQuery()->getResult();
        $tab_ids = array();
        for($i=0;$i<count($ids_user_be);$i++)
        {
	        array_push($tab_ids, $ids_user_be[$i]['id']);
        }
        return $tab_ids;
    }
	
    
    /******************************************************************/
    /***********************Anciennes Fonctions************************/
    /******************************************************************/

}